// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
// User model for dashboard authentication
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Represents a single Shopify store (tenant)
model Store {
  id                       Int      @id @default(autoincrement())
  shopifyId                String   @unique
  storeUrl                 String   @unique
  accessToken              String
  hasIngestedInitialData   Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  customers                Customer[]
  products                 Product[]
  orders                   Order[]
}

// Customer model
model Customer {
  id          Int      @id @default(autoincrement())
  shopifyId   String   @unique
  email       String?
  firstName   String?
  lastName    String?
  totalSpent  Float    @default(0)
  ordersCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  store       Store    @relation(fields: [storeId], references: [id])
  storeId     Int
  orders      Order[]
}

// Product model
model Product {
  id        Int      @id @default(autoincrement())
  shopifyId String   @unique
  title     String
  vendor    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   Int
}

// Order model
model Order {
  id                Int      @id @default(autoincrement())
  shopifyId         String   @unique
  totalPrice        Float
  fulfillmentStatus String
  processedAt       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  store             Store    @relation(fields: [storeId], references: [id])
  storeId           Int
  customer          Customer @relation(fields: [customerId], references: [id])
  customerId        Int
  @@map("orders")
}

