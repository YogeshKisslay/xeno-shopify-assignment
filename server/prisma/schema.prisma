// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//User model
model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  name               String?
  password           String
  isVerified         Boolean  @default(false) // Add this
  verificationToken  String?  @unique          // Add this
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}


// This model represents a single Shopify store (tenant)
model Store {
  id          Int      @id @default(autoincrement())
  shopifyId   String   @unique
  storeUrl    String   @unique
  accessToken String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customers Customer[]
  products  Product[]
  orders    Order[]
}

// This model stores customer data for a specific store
model Customer {
  id          Int      @id @default(autoincrement())
  shopifyId   String   @unique
  email       String?
  firstName   String?
  lastName    String?
  totalSpent  Float    @default(0)
  ordersCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to Store
  store       Store    @relation(fields: [storeId], references: [id])
  storeId     Int
  // Relation to Orders
  orders      Order[]
}

// This model stores product data for a specific store
model Product {
  id        Int      @id @default(autoincrement())
  shopifyId String   @unique
  title     String
  vendor    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Store
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   Int
}

// This model stores order data for a specific store
model Order {
  id               Int      @id @default(autoincrement())
  shopifyId        String   @unique
  totalPrice       Float
  fulfillmentStatus String
  processedAt      DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation to Store
  store            Store    @relation(fields: [storeId], references: [id])
  storeId          Int
  // Relation to Customer
  customer         Customer @relation(fields: [customerId], references: [id])
  customerId       Int

  @@map("orders")
}